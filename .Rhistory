for (w in 2:nrow(res)) MATfinal[res[w, 1], res[w, 2]] <- 1
RESULT <- NULL
#RESULT$mat2WR <- mat2WR
#RESULT$matspgn <- MATspgn
#RESULT$matfinal <- MATfinal
#RESULT$testFALSE <- testFALSE
RESULT$outcell <- res[2:nrow(res), ]
return(RESULT)
}
MATspgn <- normalize(mat2WR, "genes") * normalize(mat2WR, "species")
testspgn1 <- apply(MATspgn, 2, outl.sub, k = k)
testspgn2 <- t(apply(MATspgn, 1, outl.sub, k = k))
testspgn <- testspgn1 * testspgn2
testFALSE <- testspgn
testFALSE[testFALSE == FALSE] <- 0
testFALSE[testFALSE == TRUE] <- 1
sum(testFALSE) > 0
out.list <- apply(testspgn, 2, detect.island)
out.list
genes <- colnames(testspgn)
genes
res <- c(NA,NA)
out.list
x = PhylteR(trees, distance = "nodal", k=5)
out.list
res <- rbind(res, c(out.list[[1]][[1]], genes[1]))
res
!is.null(out.list[[1]]
)
length(out.list[[1]][[1]]) == 1
length(out.list[[1]][[1]]) > 1
vals <- MATspgn[out.list[[1]][[1]], genes[1]]
res <- rbind(res, c(names(vals)[vals == max(vals)], genes[1]))
res
res <- c(,)
res <- c(NA,NA)
res
for (i in 1:length(out.list)) {
if (!is.null(out.list[[i]])) {
for (j in 1:length(out.list[[i]])) {
if (length(out.list[[i]][[j]]) == 1) res <- rbind(res, c(out.list[[i]][[j]], genes[i]))
if (length(out.list[[i]][[j]]) > 1) {
vals <- MATspgn[out.list[[i]][[j]], genes[i]]
res <- rbind(res, c(names(vals)[vals == max(vals)], genes[i]))
}
}
}
}
for (i in 1:3) {
if (!is.null(out.list[[i]])) {
for (j in 1:length(out.list[[i]])) {
if (length(out.list[[i]][[j]]) == 1) res <- rbind(res, c(out.list[[i]][[j]], genes[i]))
if (length(out.list[[i]][[j]]) > 1) {
vals <- MATspgn[out.list[[i]][[j]], genes[i]]
res <- rbind(res, c(names(vals)[vals == max(vals)], genes[i]))
}
}
}
}
for (i in 1:4) {
if (!is.null(out.list[[i]])) {
for (j in 1:length(out.list[[i]])) {
if (length(out.list[[i]][[j]]) == 1) res <- rbind(res, c(out.list[[i]][[j]], genes[i]))
if (length(out.list[[i]][[j]]) > 1) {
vals <- MATspgn[out.list[[i]][[j]], genes[i]]
res <- rbind(res, c(names(vals)[vals == max(vals)], genes[i]))
}
}
}
}
for (i in 1:10) {
if (!is.null(out.list[[i]])) {
for (j in 1:length(out.list[[i]])) {
if (length(out.list[[i]][[j]]) == 1) res <- rbind(res, c(out.list[[i]][[j]], genes[i]))
if (length(out.list[[i]][[j]]) > 1) {
vals <- MATspgn[out.list[[i]][[j]], genes[i]]
res <- rbind(res, c(names(vals)[vals == max(vals)], genes[i]))
}
}
}
}
for (i in 5:6) {
if (!is.null(out.list[[i]])) {
for (j in 1:length(out.list[[i]])) {
if (length(out.list[[i]][[j]]) == 1) res <- rbind(res, c(out.list[[i]][[j]], genes[i]))
if (length(out.list[[i]][[j]]) > 1) {
vals <- MATspgn[out.list[[i]][[j]], genes[i]]
res <- rbind(res, c(names(vals)[vals == max(vals)], genes[i]))
}
}
}
}
for (i in 6:7) {
if (!is.null(out.list[[i]])) {
for (j in 1:length(out.list[[i]])) {
if (length(out.list[[i]][[j]]) == 1) res <- rbind(res, c(out.list[[i]][[j]], genes[i]))
if (length(out.list[[i]][[j]]) > 1) {
vals <- MATspgn[out.list[[i]][[j]], genes[i]]
res <- rbind(res, c(names(vals)[vals == max(vals)], genes[i]))
}
}
}
}
for (i in 8:8) {
if (!is.null(out.list[[i]])) {
for (j in 1:length(out.list[[i]])) {
if (length(out.list[[i]][[j]]) == 1) res <- rbind(res, c(out.list[[i]][[j]], genes[i]))
if (length(out.list[[i]][[j]]) > 1) {
vals <- MATspgn[out.list[[i]][[j]], genes[i]]
res <- rbind(res, c(names(vals)[vals == max(vals)], genes[i]))
}
}
}
}
out.list[[8]]
length(out.list[[8*]]
length(out.list[[8]]
)
genes[i]
vals <- MATspgn[out.list[[8]][[6]], genes[8]]
vals
rbind(res, c(names(vals)[vals == max(vals)], genes[8])
)
res
names(vals)
names(vals)[vals == max(vals)]
c(names(vals)[vals == max(vals)], genes[8])
out.list[[8]]
vals <- MATspgn[out.list[[8]][[1]], genes[8]]
rbind(res, c(names(vals)[vals == max(vals)], genes[8]))
vals <- MATspgn[out.list[[8]][[1]], genes[8]]
c(names(vals)[vals == max(vals)], genes[8])
vals <- MATspgn[out.list[[8]][[2]], genes[8]]
c(names(vals)[vals == max(vals)], genes[8])
vals <- MATspgn[out.list[[8]][[3]], genes[8]]
c(names(vals)[vals == max(vals)], genes[8])
vals
out.list
c(names(vals)[vals == max(vals)]
)
c(names(vals)[vals == max(vals)])
length(c(names(vals)[vals == max(vals)]))
multi = c(names(vals)[vals == max(vals)])
multi
cbind(multi, rep = length(multi))
cbind(multi, rep(genes[i],length(multi)))
rbind(res, x)
res <- c(NA,NA)
for (i in 1:length(out.list)) {
if (!is.null(out.list[[i]])) {
for (j in 1:length(out.list[[i]])) {
if (length(out.list[[i]][[j]]) == 1) res <- rbind(res, c(out.list[[i]][[j]], genes[i]))
if (length(out.list[[i]][[j]]) > 1) {
vals <- MATspgn[out.list[[i]][[j]], genes[i]]
multi = c(names(vals)[vals == max(vals)])
if(length(multi) > 1){
x = cbind(multi, rep(genes[i],length(multi)))
res <- rbind(res, x)
}
else{
res <- rbind(res, multi, genes[i]))
}
}
}
}
}
res <- c(NA,NA)
for (i in 1:length(out.list)) {
if (!is.null(out.list[[i]])) {
for (j in 1:length(out.list[[i]])) {
if (length(out.list[[i]][[j]]) == 1) res <- rbind(res, c(out.list[[i]][[j]], genes[i]))
if (length(out.list[[i]][[j]]) > 1) {
vals <- MATspgn[out.list[[i]][[j]], genes[i]]
multi = c(names(vals)[vals == max(vals)])
if(length(multi) > 1){
x = cbind(multi, rep(genes[i],length(multi)))
res <- rbind(res, x)
}
else{
res <- rbind(res, multi, genes[i])
}
}
}
}
}
x = PhylteR(trees, distance = "nodal", k=5)
source('~/Documents/PhylteR.R')
x = PhylteR(trees, distance = "nodal", k=5)
x
for (i in 1:length(out.list)) {
if (!is.null(out.list[[i]])) {
for (j in 1:length(out.list[[i]])) {
if (length(out.list[[i]][[j]]) == 1) res <- rbind(res, c(out.list[[i]][[j]], genes[i]))
if (length(out.list[[i]][[j]]) > 1) {
vals <- MATspgn[out.list[[i]][[j]], genes[i]]
multi = c(names(vals)[vals == max(vals)])
if(length(multi) > 1){
x = cbind(multi, rep(genes[i],length(multi)))
res <- rbind(res, x)
}
else{
res <- rbind(res, multi, genes[i])
}
}
}
}
}
res
rbind(res, x)
cbind(multi, rep(genes[i],length(multi)))
multi
multi[[1]]
cbind(multi[[1]], rep(genes[i],length(multi)))
if (sum(testFALSE) > 0) {
out.list <- apply(testspgn, 2, detect.island)
genes <- colnames(testspgn)
res <- c(NA,NA)
for (i in 1:length(out.list)) {
if (!is.null(out.list[[i]])) {
for (j in 1:length(out.list[[i]])) {
if (length(out.list[[i]][[j]]) == 1) res <- rbind(res, c(out.list[[i]][[j]], genes[i]))
if (length(out.list[[i]][[j]]) > 1) {
vals <- MATspgn[out.list[[i]][[j]], genes[i]]
multi = c(names(vals)[vals == max(vals)])
if(length(multi) > 1){
x = cbind(multi[[1]], rep(genes[i],length(multi)))
res <- rbind(res, x)
}
else{
res <- rbind(res, multi, genes[i])
}
}
}
}
}
}
res
res
res <- c(NA,NA)
vals <- MATspgn[out.list[[8]][[3]], genes[3]]
vals
multi = c(names(vals)[vals == max(vals)])
multi
vals <- MATspgn[out.list[[i]][[j]], genes[i]]
vals
vals <- MATspgn[out.list[[8]][[3]], genes[8]]
vals
multi = c(names(vals)[vals == max(vals)])
multi
x = cbind(multi, rep(genes[i],length(multi)))
x
res <- rbind(res, x)
res
res <- c(NA,NA)
multi
x
x[[1]]
x[1]
x
out.list <- apply(testspgn, 2, detect.island)
genes <- colnames(testspgn)
res <- c(NA,NA)
for (i in 1:length(out.list)) {
if (!is.null(out.list[[i]])) {
for (j in 1:length(out.list[[i]])) {
if (length(out.list[[i]][[j]]) == 1) res <- rbind(res, c(out.list[[i]][[j]], genes[i]))
if (length(out.list[[i]][[j]]) > 1) {
vals <- MATspgn[out.list[[i]][[j]], genes[i]]
multi = c(names(vals)[vals == max(vals)])
if(length(multi) > 1){
x = cbind(multi, rep(genes[i],length(multi)))
res <- rbind(res, x)
}
else{
res <- rbind(res, multi, genes[i])
}
}
}
}
}
res
typeof(x)
typeof(res)
typeof(multi)
res <- c(NA,NA)
res <- rbind(res, x)
res
length(multi) > 1
multi
vals <- MATspgn[out.list[[8]][[3]], genes[8]]
multi = c(names(vals)[vals == max(vals)])
length(multi) > 1
multi
out.list <- apply(testspgn, 2, detect.island)
genes <- colnames(testspgn)
res <- c(NA,NA)
for (i in 1:length(out.list)) {
if (!is.null(out.list[[i]])) {
for (j in 1:length(out.list[[i]])) {
if (length(out.list[[i]][[j]]) == 1) res <- rbind(res, c(out.list[[i]][[j]], genes[i]))
if (length(out.list[[i]][[j]]) > 1) {
vals <- MATspgn[out.list[[i]][[j]], genes[i]]
multi = c(names(vals)[vals == max(vals)])
if(length(multi) > 1){
x = cbind(multi, rep(genes[i],length(multi)))
res <- rbind(res, x)
print(x)
}
else{
res <- rbind(res, multi, genes[i])
}
}
}
}
}
out.list <- apply(testspgn, 2, detect.island)
genes <- colnames(testspgn)
res <- c(NA,NA)
for (i in 1:length(out.list)) {
if (!is.null(out.list[[i]])) {
for (j in 1:length(out.list[[i]])) {
if (length(out.list[[i]][[j]]) == 1) res <- rbind(res, c(out.list[[i]][[j]], genes[i]))
if (length(out.list[[i]][[j]]) > 1) {
vals <- MATspgn[out.list[[i]][[j]], genes[i]]
multi = c(names(vals)[vals == max(vals)])
if(length(multi) > 1){
x = cbind(multi, rep(genes[i],length(multi)))
res <- rbind(res, x)
print(x)
}
else{
res <- rbind(res, multi, genes[i])
}
}
}
}
}
colnames(res) <- c("Species", "Genes")
##we construct the MATfinal
res
res <- cbind(res, x)
?rbind
length(out.list[[8]][[3]]) == 1
MATspgn[out.list[[53]][[1]], genes[1]]
multi
length(multi)
cbind(multi, rep(genes[i],length(multi)))
rbind(res, x)
x
res <- c(NA,NA)
res <- rbind(res, x)
res
rbind(res, x)
rbind(res, x)
rbind(res, x)
MATspgn <- normalize(mat2WR, "genes") * normalize(mat2WR, "species")
testspgn1 <- apply(MATspgn, 2, outl.sub, k = k)
testspgn2 <- t(apply(MATspgn, 1, outl.sub, k = k))
testspgn <- testspgn1 * testspgn2
testFALSE <- testspgn
testFALSE[testFALSE == FALSE] <- 0
testFALSE[testFALSE == TRUE] <- 1
if (sum(testFALSE) > 0) {
out.list <- apply(testspgn, 2, detect.island)
genes <- colnames(testspgn)
res <- c(NA,NA)
for (i in 1:length(out.list)) {
if (!is.null(out.list[[i]])) {
for (j in 1:length(out.list[[i]])) {
if (length(out.list[[i]][[j]]) == 1) res <- rbind(res, c(out.list[[i]][[j]], genes[i]))
if (length(out.list[[i]][[j]]) > 1) {
vals <- MATspgn[out.list[[i]][[j]], genes[i]]
multi = c(names(vals)[vals == max(vals)])
if(length(multi) > 1){
x = cbind(multi, rep(genes[i],length(multi)))
res <- rbind(res, x)
}
else{
res <- rbind(res, multi, genes[i])
print(multi)
}
}
}
}
}
}
out.list <- apply(testspgn, 2, detect.island)
genes <- colnames(testspgn)
res <- c(NA,NA)
for (i in 1:length(out.list)) {
if (!is.null(out.list[[i]])) {
for (j in 1:length(out.list[[i]])) {
if (length(out.list[[i]][[j]]) == 1) res <- rbind(res, c(out.list[[i]][[j]], genes[i]))
if (length(out.list[[i]][[j]]) > 1) {
vals <- MATspgn[out.list[[i]][[j]], genes[i]]
multi = c(names(vals)[vals == max(vals)])
if(length(multi) > 1){
x = cbind(multi, rep(genes[i],length(multi)))
res <- rbind(res, x)
}
else{
res <- rbind(res, multi, genes[i])
print(res)
}
}
}
}
}
MATspgn <- normalize(mat2WR, "genes") * normalize(mat2WR, "species")
testspgn1 <- apply(MATspgn, 2, outl.sub, k = k)
testspgn2 <- t(apply(MATspgn, 1, outl.sub, k = k))
testspgn <- testspgn1 * testspgn2
testFALSE <- testspgn
testFALSE[testFALSE == FALSE] <- 0
testFALSE[testFALSE == TRUE] <- 1
if (sum(testFALSE) > 0) {
out.list <- apply(testspgn, 2, detect.island)
genes <- colnames(testspgn)
res <- c(NA,NA)
for (i in 1:length(out.list)) {
if (!is.null(out.list[[i]])) {
for (j in 1:length(out.list[[i]])) {
if (length(out.list[[i]][[j]]) == 1) res <- rbind(res, c(out.list[[i]][[j]], genes[i]))
if (length(out.list[[i]][[j]]) > 1) {
vals <- MATspgn[out.list[[i]][[j]], genes[i]]
multi = c(names(vals)[vals == max(vals)])
if(length(multi) > 1){
x = cbind(multi, rep(genes[i],length(multi)))
res <- rbind(res, x)
print(res)
}
else{
res <- rbind(res, multi, genes[i])
}
}
}
}
}
}
MATspgn[out.list[[1]][[1]], genes[1]]
c(names(vals)[vals == max(vals)])
vals = MATspgn[out.list[[1]][[1]], genes[1]]
c(names(vals)[vals == max(vals)])
multi = c(names(vals)[vals == max(vals)])
multi
length(multi) > 1
rbind(res, multi, genes[i])
res <- c(NA,NA)
rbind(res, multi, genes[i])
out.list <- apply(testspgn, 2, detect.island)
genes <- colnames(testspgn)
res <- c(NA,NA)
for (i in 1:length(out.list)) {
if (!is.null(out.list[[i]])) {
for (j in 1:length(out.list[[i]])) {
if (length(out.list[[i]][[j]]) == 1) res <- rbind(res, c(out.list[[i]][[j]], genes[i]))
if (length(out.list[[i]][[j]]) > 1) {
vals <- MATspgn[out.list[[i]][[j]], genes[i]]
multi = c(names(vals)[vals == max(vals)])
if(length(multi) > 1){
x = cbind(multi, rep(genes[i],length(multi)))
res <- rbind(res, x)
print(res)
}
else{
res <- rbind(res, c(multi, genes[i]))
}
}
}
}
}
source('~/Documents/PhylteR.R')
x = PhylteR(trees, distance = "nodal", k=5)
x
source('~/Documents/Phylter/PhylteR/R/PhylteR.R')
source('~/Documents/Phylter/PhylteR/R/PhylteR.R')
trees  = read.tree("/home/aurore/forets/DICKEYA_OK_BIS/mcoa.nw")
PhylteR(trees, distance = "patristic")
PhylteR(trees, distance = "nodal")
source('~/Documents/PhylterBU0607/pmcoa.R')
pMCOA.complete(trees, distance = "nodal")
x = PhylteR(trees, distance = "nodal")
y = pMCOA.complete(trees, distance = "nodal")
source('~/Documents/Phylter/PhylteR/R/PhylteR.R')
x = PhylteR(trees, distance = "nodal")
x$Complete$outgn
x$Complete$outsp
source('~/Documents/PhylterBU0607/pmcoa.R')
y = pMCOA.complete(trees, distance = "nodal")
y$outcompl$allgn
y$outcompl$allsp
y$outcompl
x$Complete
runApp()
y = pMCOA.complete(trees, distance = "nodal")
source('~/Documents/Phylter/PhylteR/R/PhylteR.R')
trees  = read.tree("/home/aurore/forets/Enterobacteriales/mcoa.nw")
x = PhylteR(trees, distance = "nodal")
x = PhylteR(trees, distance = "patristic")
x
trees  = read.tree("/home/aurore/forets/UNCLASSIFIEDBACTERIA/mcoa.nw")
x = PhylteR(trees, distance = "nodal")
runApp()
shiny::runApp()
.Librar
.Library
.Library(help)
.libPaths(new = "/home/comte/R/R-3.4.3/library")
.libPaths()
install.packages("shiny", lib="/home/comte/Téléchargements/R-3.4.3/library")
install.packages("shiny", lib="/home/comte/Téléchargements/R-3.4.3/library")
shiny::runApp()
